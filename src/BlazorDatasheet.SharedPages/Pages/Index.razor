@page "/"
@using BlazorDatasheet.Data
@using BlazorDatasheet.Formats
@using BlazorDatasheet.ObjectEditor
@using BlazorDatasheet.Validation
@using BlazorDatasheet.Render
@using BlazorDatasheet.SharedPages.Data
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime

<PageTitle>Random Group</PageTitle>

<div class="row">
    <div class="col-md-6">
        <div class="card border-primary mb-3">
            <div class="card-header bg-primary text-white">랜덤 조 구성을 위한 설정</div>
            <div class="card-body">
                <div class="form-group row">
                    <label for="number-input" class="col-sm-4 col-form-label">총 사람수</label>
                    <div class="col-sm-8">
                        <input type="number" @bind="PeopleNumber" class="form-control" @oninput="HandleNumberInput" min="2" max="500" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="number-input" class="col-sm-4 col-form-label">총 그룹수</label>
                    <div class="col-sm-8">
                        <input type="number" @bind="GroupNumber" class="form-control" @oninput="HandleNumberInput" min="2" max="500" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    <div class="col-md-6">
        <div class="card border-primary mb-4">
            <div class="card-header bg-primary text-white">사람별 특성 추가/삭제 및 결과</div>
            <div class="card-body">
                <div class="form-group row">
                    <label for="textbox-input" class="col-sm-3 col-form-label">특성 이름</label>
                    <div class="col-sm-6">
                        <input id="textbox-input" type="text" @bind="@newColumn" @oninput="HandleAttributeInput" class="form-control" />
                    </div>
                    <div class="col-sm-3">
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary" @onclick="AddColumn" disabled="@IsAddDisabled">추가</button>
                        </div>
                    </div>
                </div>
                <div class="form-group row">
                    <div class="col-sm-6">
                        <button class="btn btn-primary" @onclick="DoRandom">랜덤 그룹 결과</button>                        
                    </div>
                    <div class="col-sm-6">
                        <div class="d-flex justify-content-end">
                            <button class="btn btn-primary btn-block" @onclick="DeleteColumn">삭제</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

</div>






<div class="toast-container position-fixed top-0 end-0 p-3">
    <div class="toast" role="alert" aria-live="assertive" aria-atomic="true" @onclick="HideToast">
        <div class="toast-header">
            <strong class="me-auto">Notice</strong>
            <button type="button" class="btn-close" data-bs-dismiss="toast" aria-label="Close"></button>
        </div>
        <div class="toast-body">
            @ToastMessage
        </div>
    </div>
</div>


<div class="form-group">
    <Datasheet Theme="@Theme"
               Sheet="sheet"
               StickyHeadings="true"
               IsFixedHeight="false">
    </Datasheet>
</div>


@code {
    private Sheet? sheet = null;
    private List<Person> ?People { get; set; }
    private ObjectEditor<Person> ?_editor;
    private string Theme => IsDarkMode ? "dark" : "default";
    private bool IsDarkMode { get; set; }
    private bool IsAddDisabled = true;

    private int PeopleNumber { get; set; } = 12;
    private int GroupNumber { get; set; } = 4;
    private int peopleMin = 2;
    private int peopleMax = 500;
    private string newColumn = "";

    private string ToastMessage { get; set; } = "";
    private bool ShowToast { get; set; } = false;

    private string selectedColumn { get; set; } = "";


    private async Task ShowToastNotification(string message)
    {
        ToastMessage = message;
        ShowToast = true;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("showToast"); // Call JavaScript function to show the toast
    }

    private void HandleSelectedColumnChanged(int selectedColumn)
    {
        // Do something with the selected column index
        Console.WriteLine($"Selected column index: {selectedColumn}");
    }

    private async Task HideToast()
    {
        ShowToast = false;
        StateHasChanged();

        await JSRuntime.InvokeVoidAsync("hideToast"); // Call JavaScript function to hide the toast
    }


    private void HandleInputChange(ChangeEventArgs e)
    {
        newColumn = e.Value.ToString();
        IsAddDisabled = string.IsNullOrWhiteSpace(newColumn);
    }

    private void DeleteColumn()
    {
        if (sheet!.Selection.ActiveRegion == null)
        {
            return;
        }
        _editor!.Sheet.RemoveCol(sheet.Selection.ActiveRegion.Left);
    }

    private void DoRandom()
    {
        if (_editor!.Sheet.ColumnHeadings[_editor!.Sheet.ColumnHeadings.Count - 1].Header != Define.Result)
        {
            _editor!.Sheet.InsertColAfter(_editor!.Sheet.NumCols - 1);
            _editor!.Sheet.ColumnHeadings[_editor!.Sheet.ColumnHeadings.Count - 1].Header = Define.Result;
        }

        List<string[]> Data = new List<string[]>();
        int DateRank = 4;
        Data.Add(new string[] { "v1", GroupNumber.ToString(), DateRank.ToString() });

        List<string> Types = new List<string>();
        List<string> Weights = new List<string>();
        List<string> AttributeName = new List<string>();

        Types.Add("INDEX");
        Weights.Add("");
        AttributeName.Add("No.");
        for(int col = 0; col < _editor!.Sheet.ColumnHeadings.Count; col++)
        {
            Types.Add("TEXT");
            Weights.Add("1");
            AttributeName.Add(_editor!.Sheet.ColumnHeadings[col].Header);
        }

        Data.Add(Types.ToArray());
        Data.Add(Weights.ToArray());
        Data.Add(AttributeName.ToArray());

        for (int row = 0; row < _editor!.Sheet.NumRows; row++)
        {
            List<string> one = new List<string>();
            one.Add(row.ToString());
            for (int col = 0; col < _editor!.Sheet.ColumnHeadings.Count; col++)
            {
                one.Add(Convert.ToString(_editor!.Sheet.GetCell(row, col).GetValue()));
            }
            Data.Add(one.ToArray());
        }

        MakeRandom.GetResult(Data.ToArray());
        //MakeRandom.GetResult(SampleRawInfo.Data);
    }

    private void AddColumn()
    {
        if (newColumn == Define.Result)
        {
            newColumn = "";
            IsAddDisabled = true;
            // await ShowToastNotification("[결과]를 사용할 수 없습니다.");
            return;
        }
        else if (newColumn != "")
        {
            int InsertCol;
            if (_editor!.Sheet.ColumnHeadings[_editor!.Sheet.ColumnHeadings.Count - 1].Header == Define.Result)
            {
                InsertCol = _editor!.Sheet.NumCols - 2;
            }
            else
            {
                InsertCol = _editor!.Sheet.NumCols - 1;
            }
            _editor!.Sheet.InsertColAfter(InsertCol);
            _editor!.Sheet.ColumnHeadings[InsertCol+1].Header = newColumn;
            newColumn = "";
            IsAddDisabled = true;
        }
    }

    private void InsertColAfterSelection()
    {
        _editor!.Sheet.InsertColAfter(_editor!.Sheet.NumCols - 1);
        _editor!.Sheet.ColumnHeadings[_editor!.Sheet.ColumnHeadings.Count - 1].Header = _editor!.Sheet.ColumnHeadings.Count.ToString();
    }

    private void RemoveCol()
    {
        if (sheet!.Selection.ActiveRegion == null)
        {
            return;
        }
        _editor!.Sheet.RemoveCol(sheet!.Selection.ActiveRegion.Left);
    }

    private CellFormat GreenBg = new CellFormat() { BackgroundColor = "var(--cell-highlight-bg-color)" };

    private void HandleAttributeInput(ChangeEventArgs e)
    {
        IsAddDisabled = (e.Value.ToString() == "");
    }

    private void HandleNumberInput(ChangeEventArgs e)
    {
        // Retrieve the updated value from the event arguments
        if (int.TryParse(e.Value.ToString(), out int newValue))
        {
            if (newValue < peopleMin)
            {
                newValue = peopleMin;
            }
            else if (newValue > peopleMax)
            {
                newValue = peopleMax;
            }

            PeopleNumber = newValue;

            while (_editor!.Sheet.NumRows > PeopleNumber)
            {
                _editor!.Sheet.RemoveRow(_editor!.Sheet.NumRows - 1);
            }
            while (_editor!.Sheet.NumRows < PeopleNumber)
            {
                int LastRows = _editor!.Sheet.NumRows - 1;
                _editor!.Sheet.InsertRowAfter(LastRows);
                LastRows++;
                _editor!.Sheet.TrySetCellValue(LastRows, 0, LastRows.ToString());
            }
        }
    }

    // Define the event handler method
    private void CellChanged(object? sender, IEnumerable<ChangeEventArgs> e)
    {
        // Handle the CellsChanged event
        // ...
    }

    protected override void OnInitialized()
    {
        People = new List<Person>();

        var random = new Random();

        var firstNames = new List<string>() {
            "지우",
            "서연",
            "하윤",
            "서현",
            "윤서",
            "민서",
            "민준",
            "지훈",
            "현우",
            "주원",
            "예준",
            "도윤"};

        var genders = new List<string>() {
            "남자",
            "모름",
            "여자"};

        var departments = new List<string>() {
            "공대",
            "문과대",
            "법대",
            "체대",
            "미대",
            "상경대"};


        for (int i = 1; i <= PeopleNumber; i++)
        {
            People.Add(new Person()
                {
                    FirstName = firstNames[random.Next(0, firstNames.Count)],
                    Gender = genders[random.Next(0, genders.Count)],
                    Department = departments[random.Next(0, departments.Count)],
                });
        }

        var ageCf =
            new ConditionalFormat(
                (posn, sheet) => (sheet.GetCell(posn.row, posn.col).GetValue<int?>()) > 85, cell => new CellFormat() { ForegroundColor = "var(--invalid-cell-foreground-color)" });

        var builder1 = new ObjectEditorBuilder<Person>(People, GridDirection.PropertiesAcrossColumns);
        builder1.AutogenerateProperties(false)
            .WithProperty(x => x.FirstName, pd => { pd.Heading = "이름"; })
            .WithProperty(x => x.Gender, pd => { pd.Heading = "성별"; })
            .WithProperty(x => x.Department, pd => { pd.Heading = "학과"; });

        _editor = builder1.Build();

        sheet = _editor.Sheet;
    }

}