@page "/"
@using BlazorDatasheet.Data
@using BlazorDatasheet.Formats
@using BlazorDatasheet.ObjectEditor
@using BlazorDatasheet.Validation
@using BlazorDatasheet.Render
@using BlazorDatasheet.SharedPages.Data
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime

<PageTitle>Random Group</PageTitle>

<div>
    <button @onclick="InsertRowAfterSelection">Insert row after selection</button>
    <button @onclick="InsertColAfterSelection">Insert col after selection</button>
    <button @onclick="RemoveCol">RemoveCol</button>
    <button @onclick="() => Sheet!.Commands.Undo()">Undo</button>
    <button @onclick="() => Sheet!.Commands.Redo()">Redo</button>
</div>

<div class="form-group">
    <label for="textbox-input" class="form-label">Text Input:</label>
    <input id="textbox-input" type="text" class="form-control" />
</div>

<div class="form-group">
    <label for="number-input" class="form-label">Number of Users:</label>
    <input type="number" @bind="myNumber" class="form-control" @oninput="HandleNumberInput" @ref="numberInput" min="2" max="500" />
</div>

<div class="form-group">
    <Datasheet Theme="@Theme"
               Sheet="Sheet"
               StickyHeadings="true"
               IsFixedHeight="false">
    </Datasheet>
</div>

@code {

    private Sheet? Sheet = null;
    private List<Person> ?People { get; set; }
    private ObjectEditor<Person> ?_editor;
    private string Theme => IsDarkMode ? "dark" : "default";
    private bool IsDarkMode { get; set; }
    private int myNumber { get; set; }
    private ElementReference numberInput;
    private int peopleMin = 2;
    private int peopleMax = 500;


    private void InsertRowAfterSelection()
    {
        if (Sheet!.Selection.ActiveRegion == null)
        {
            return;
        }
        _editor!.InsertAt(new Person(), Sheet.Selection.ActiveRegion.TopLeft.Row);
    }

    private void InsertColAfterSelection()
    {
        if (Sheet!.Selection.ActiveRegion == null)
        {
            return;
        }
        _editor!.Sheet.InsertColAfter(Sheet.Selection.ActiveRegion.Left);
    }

    private void RemoveCol()
    {
        if (Sheet!.Selection.ActiveRegion == null)
        {
            return;
        }
        _editor!.Sheet.RemoveCol(Sheet!.Selection.ActiveRegion.Left);
    }

    private CellFormat GreenBg = new CellFormat() { BackgroundColor = "var(--cell-highlight-bg-color)" };

    private void HandleNumberInput(ChangeEventArgs e)
    {
        // Retrieve the updated value from the event arguments
        if (int.TryParse(e.Value.ToString(), out int newValue))
        {
            if (newValue < peopleMin)
            {
                newValue = peopleMin;
            }
            else if (newValue > peopleMax)
            {
                newValue = peopleMax;
            }

            myNumber = newValue;

            while (_editor!.Sheet.NumRows > myNumber)
            {
                _editor!.Sheet.RemoveRow(_editor!.Sheet.NumRows - 1);
            }
            while (_editor!.Sheet.NumRows < myNumber)
            {
                int LastRows = _editor!.Sheet.NumRows;
                _editor!.Sheet.InsertRowAfter(LastRows);
                // LastRows++;
                // _editor!.Sheet.TrySetCellValue(LastRows, 1, "hi");
            }
        }
    }


    protected override void OnInitialized()
    {
        People = new List<Person>();

        var random = new Random();

        var firstNames = new List<string>() { "Myah", "Jaeden", "Evelin", "Riya", "Isiah", "Alannah", "Mohamed", "Gavyn", "Leo", "Carley", "Sloane" };

        this.myNumber = 100;

        for (int i = 0; i < myNumber; i++)
        {
            People.Add(new Person()
                {
                    FirstName = firstNames[random.Next(0, firstNames.Count)],
                });
        }

        var ageCf =
            new ConditionalFormat(
                (posn, sheet) => (sheet.GetCell(posn.row, posn.col).GetValue<int?>()) > 85, cell => new CellFormat() { ForegroundColor = "var(--invalid-cell-foreground-color)" });

        var builder1 = new ObjectEditorBuilder<Person>(People, GridDirection.PropertiesAcrossColumns);
        builder1.AutogenerateProperties(false)
            .WithProperty(x => x.FirstName, pd => { pd.Heading = "First Name"; });

        _editor = builder1.Build();

        Sheet = _editor.Sheet;
    }

}