@page "/pickme"
@using BlazorDatasheet.Data
@using BlazorDatasheet.Formats
@using BlazorDatasheet.ObjectEditor
@using BlazorDatasheet.Validation
@using BlazorDatasheet.Render
@using BlazorDatasheet.SharedPages.Data
@using Microsoft.JSInterop;
@inject IJSRuntime JSRuntime

<PageTitle>Random Group</PageTitle>

<div class="row">
    <div class="col-md-6">
        <div class="card border-primary mb-3">
            <div class="card-header bg-primary text-white">랜덤 조 구성을 위한 설정</div>
            <div class="card-body">
                <div class="form-group row">
                    <label for="number-input" class="col-sm-4 col-form-label">총 사람수</label>
                    <div class="col-sm-8">
                        <input type="number" @bind="PeopleNumber" class="form-control" @oninput="HandleNumberInput" min="2" max="500" />
                    </div>
                </div>
                <div class="form-group row">
                    <label for="number-input" class="col-sm-4 col-form-label">조작 버튼</label>
                    <div class="col-sm-4">
                        <button class="btn btn-primary" @onclick="DoPIckMeUp">Pick Me Up</button>
                    </div>
                    <!--
                    <div class="col-sm-4">
                        <button class="btn btn-primary" @onclick="DoInit">모든 체크 없애기</button>
                    </div>
                    -->
                </div>
                <div class="form-group row">
                    <label for="number-input" class="col-sm-4 col-form-label">Last Picked</label>
                    <div class="col-sm-8">
                        <input type="text" id="number-input" readonly value="@lastPicked" />
                    </div>
                </div>
            </div>
        </div>
    </div>
    

</div>




<div class="form-group">
    <Datasheet Theme="@Theme"
               Sheet="sheet"
               StickyHeadings="true"
               IsFixedHeight="false">
    </Datasheet>
</div>


@code {
    private Sheet? sheet = null;
    private List<Person> ?People { get; set; }
    private ObjectEditor<Person> ?_editor;
    private string Theme => IsDarkMode ? "dark" : "default";
    private bool IsDarkMode { get; set; }
    private bool IsAddDisabled = true;

    private int PeopleNumber { get; set; } = 8;
    private int peopleMin = 2;
    private int peopleMax = 500;
    private string newColumn = "";
    private CellFormat GreenBg = new CellFormat() { BackgroundColor = "var(--cell-highlight-bg-color)" };

    private int NameColumn = 0;
    private int PickedColumn = 1;
    private string lastPicked = "";

    private void DoPIckMeUp()
    {
        List<int> PickCandidates = new List<int>();
        for (int row = 0; row < _editor!.Sheet.NumRows; row++)
        {
            if (Convert.ToBoolean(_editor!.Sheet.GetCell(row, PickedColumn).GetValue()) == false)
            {
                PickCandidates.Add(row);
            }
        }

        if (PickCandidates.Count == 0)
        {
            lastPicked = "모두 한번씩 뽑혔어용!";
        }
        else
        {
            int PickIndex = PickCandidates[new Random().Next(PickCandidates.Count)];

            lastPicked = Convert.ToString(_editor!.Sheet.GetCell(PickIndex, NameColumn).GetValue());
            _editor!.Sheet.TrySetCellValue(PickIndex, PickedColumn, true);
        }
    }


    private void DoInit()
    {
        for (int row = 0; row < _editor!.Sheet.NumRows; row++)
        {
            _editor!.Sheet.TrySetCellValue(row, PickedColumn, false);
        }
    }

    private void HandleNumberInput(ChangeEventArgs e)
    {
        // Retrieve the updated value from the event arguments
        if (int.TryParse(e.Value.ToString(), out int newValue))
        {
            if (newValue < peopleMin)
            {
                newValue = peopleMin;
            }
            else if (newValue > peopleMax)
            {
                newValue = peopleMax;
            }

            PeopleNumber = newValue;

            while (_editor!.Sheet.NumRows > PeopleNumber)
            {
                _editor!.Sheet.RemoveRow(_editor!.Sheet.NumRows - 1);
            }
            while (_editor!.Sheet.NumRows < PeopleNumber)
            {
                int LastRows = _editor!.Sheet.NumRows - 1;
                _editor!.Sheet.InsertRowAfter(LastRows);
                LastRows++;
                _editor!.Sheet.TrySetCellValue(LastRows, 0, LastRows.ToString());
            }
        }
    }

    protected override void OnInitialized()
    {
        People = new List<Person>();

        var random = new Random();

        var firstNames = new List<string>() {
            "지우",
            "서연",
            "하윤",
            "서현",
            "윤서",
            "민서",
            "민준",
            "지훈",
            "현우",
            "주원",
            "예준",
            "도윤"};



        for (int i = 1; i <= PeopleNumber; i++)
        {
            People.Add(new Person()
                {
                    FirstName = firstNames[random.Next(0, firstNames.Count)],
                    IsFriendly = false,
                });
        }

        var ageCf =
            new ConditionalFormat(
                (posn, sheet) => (sheet.GetCell(posn.row, posn.col).GetValue<int?>()) > 85, cell => new CellFormat() { ForegroundColor = "var(--invalid-cell-foreground-color)" });

        var builder1 = new ObjectEditorBuilder<Person>(People, GridDirection.PropertiesAcrossColumns);
        builder1.AutogenerateProperties(false)
            .WithProperty(x => x.FirstName, pd => { pd.Heading = "이름"; })
            .WithProperty(x => x.IsFriendly, pd => { pd.Heading = Define.PickMeUp; });

        _editor = builder1.Build();

        sheet = _editor.Sheet;
    }

}